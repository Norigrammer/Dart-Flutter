rules_version = '2';
service cloud.firestore {
  match /databases/{db}/documents {
    function isSignedIn() {
      return request.auth != null;
    }
    function isMember(petId) {
      let pet = get(/databases/$(db)/documents/pets/$(petId));
      return isSignedIn() && pet.exists && request.auth.uid in pet.data.members;
    }

    // pets collection
    match /pets/{petId} {
      allow read: if isMember(petId);
      allow create: if isSignedIn();
      allow update, delete: if isMember(petId);
    }

    // logs subcollection under a pet
    match /pets/{petId}/logs/{logId} {
      allow read: if isMember(petId);
      allow create: if isMember(petId)
        && request.resource.data.createdBy == request.auth.uid;
      allow update, delete: if isMember(petId);
    }

    // This rule allows anyone with your Firestore database reference to view, edit,
    // and delete all data in your Firestore database. It is useful for getting
    // started, but it is configured to expire after 30 days because it
    // leaves your app open to attackers. At that time, all client
    // requests to your Firestore database will be denied.
    //
    // Make sure to write security rules for your app before that time, or else
    // all client requests to your Firestore database will be denied until you Update
    // your rules
    match /{document=**} {
      allow read, write: if request.time < timestamp.date(2025, 12, 31);
    }
  }
}
